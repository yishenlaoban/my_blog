(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{587:function(a,s,t){"use strict";t.r(s);var n=t(3),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_10-enjoy模板引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-enjoy模板引擎"}},[a._v("#")]),a._v(" 10.Enjoy模板引擎")]),a._v(" "),t("p",[a._v("在configPlugin 上配置 render 界面上的Enjoy")]),a._v(" "),t("h2",{attrs:{id:"_1-方法和属性的调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-方法和属性的调用"}},[a._v("#")]),a._v(" 1.方法和属性的调用")]),a._v(" "),t("p",[a._v("​          和java一样的")]),a._v(" "),t("h2",{attrs:{id:"_2-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-表达式"}},[a._v("#")]),a._v(" 2.表达式")]),a._v(" "),t("h3",{attrs:{id:"_1-空合并安全取值调用操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-空合并安全取值调用操作符"}},[a._v("#")]),a._v(" 1.空合并安全取值调用操作符")]),a._v(" "),t("p",[a._v("JFinal Template Engine 引入了swift与C#语言中的空合操作符，并在其基础之上进行了极为自然的扩展，该表达式符号为两个紧靠的问号：??。代码示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("seoTitle "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"JFinal 社区"')]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("field "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("​    以上第一行代码的功能与swift语言功能完全一样，也即在seoTitle 值为null时整个表达式取后面表达式的值。而第二行代码表示对object.field进行空安全(Null Safe)属性取值，即在object为null时表达式不报异常，并且值为null。")]),a._v(" "),t("p",[a._v("​    第三行代码与第二行代码类似，仅仅是属性取值变成了方法调用，并称之为空安全(Null Safe)方法调用，表达式在object为null时不报异常，其值也为null。")]),a._v(" "),t("p",[a._v("​    当然，空合并与空安全可以极为自然地混合使用，如下是示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("field "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"默认值"')]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" value\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("​    以上代码中，第一行代码表示左侧null safe 属性取值为null时，整个表达式的值为后方的字符串中的值，而第二行代码表示值为null时整个表达式取value这个变量中的值。")]),a._v(" "),t("p",[a._v("​    "),t("strong",[a._v("特别注意：?? 操作符的优先级高于数学计算运算符：+、-、*、/、%，低于单目运算符：!、++、--。强制改变优先级使用小括号即可。")])]),a._v(" "),t("p",[a._v("​    "),t("strong",[a._v("例子：a.b ?? && expr 表达式中，其 a.b ?? 为一个整体被求值，因为 ?? 优先级高于数学计算运算符，而数学计算运算符又高于 && 运算符，进而推导出 ?? 优先级高于&&")])]),a._v(" "),t("h3",{attrs:{id:"_2、单引号字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、单引号字符串"}},[a._v("#")]),a._v(" 2、单引号字符串")]),a._v(" "),t("p",[a._v("​    针对Template Engine 经常用于html的应用场景，添加了单引号字符串支持，以下是代码示例：")]),a._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v("<a href=\"/\" class=\"#(menu == 'index' ? 'current' : 'normal')\"   首页"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("​    以上代码中的三元表达式中有三处使用了单引号字符串，"),t("strong",[a._v("好处是可以与最外层的双引号协同工作，也可以反过来，最外层用单引号字符串，而内层表达式用双引号字符串")]),a._v("。")]),a._v(" "),t("p",[a._v("​    这个设计非常有利于在模板文件中已有的双引号或单引号内容之中书写字符串表达式。")]),a._v(" "),t("h3",{attrs:{id:"_3、布尔表达式增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、布尔表达式增强"}},[a._v("#")]),a._v(" 3、布尔表达式增强")]),a._v(" "),t("p",[a._v("​    布尔表达式在原有java基础之下进行了增强，可以减少代码输入量，具体规则自上而下优先应用如下列表：")]),a._v(" "),t("ul",[t("li",[a._v("null 返回 false")]),a._v(" "),t("li",[a._v("boolean 类型，原值返回")]),a._v(" "),t("li",[a._v("String、StringBuilder等一切继承自 CharSequence 类的对象，返回 length > 0")]),a._v(" "),t("li",[a._v("其它返回 true")])]),a._v(" "),t("p",[a._v("​    以上规则可以减少模板中的代码量，以下是示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("user "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("userId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("​    以上代码中的 user 表达式实质上代替了java表达式的 user != null 这种写法，减少了代码量。当然，上述表达式如果使用 ?? 运算符，还可以更加简单顺滑：if (user.id ?? == x.userId)")]),a._v(" "),t("h3",{attrs:{id:"_4、map-定义表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、map-定义表达式"}},[a._v("#")]),a._v(" 4、Map 定义表达式")]),a._v(" "),t("p",[a._v("​    Map定义表达式的最实用场景是在调用方法或函数时提供极为灵活的参数传递方式，当方法或函数需要传递的参数名与数量不确定时极为有用，以下是基本用法：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    #"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("k1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"k2"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abc"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"k3"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("k1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("k2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"k1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"k2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"k1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("​    如上图所示，map的定义使用一对大括号，每个元素以key : value的形式定义，多个元素之间用逗号分隔。")]),a._v(" "),t("p",[a._v("​    key 只允许是合法的 java 变量名标识符或者 String 常量值（jfinal 3.4 起将支持 int、long、float、double、boolean、null 等等常量值），"),t("strong",[a._v('注意：上例中使用了标识符 k1 而非 String 常量值 "k1" 只是为了书写时的便利，与字符串是等价的，并不会对标识符 k1 进行表达式求值。')])]),a._v(" "),t("p",[a._v("​    上图中通过#set指令将定义的变量赋值给了map变量，第二与第三行中以object.field的方式进行取值，第四第五行以 map[key] 的方式进行取值，第六行则是与 java 表达式打通式的用法。")]),a._v(" "),t("p",[a._v('​    **特别注意：**上例代码如果使用 map[k1] 来取值，则会对 k1 标识符先求值，得到的是 null，也即map[k1] 相当于 map[null]，因此上述代码中使用了 map["k1"] 这样的形式来取值。')]),a._v(" "),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("h2",{attrs:{id:"_3-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-指令"}},[a._v("#")]),a._v(" 3.指令")]),a._v(" "),t("h3",{attrs:{id:"_1-输出指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-输出指令"}},[a._v("#")]),a._v(" 1.#(...)输出指令")]),a._v(" "),t("ol",[t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("field "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("seoTitle "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"JFinal 俱乐部"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6.")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("如上图所示，只需要对输出指令传入表达式即可。注意上例中第一行代码 value 参数可以为 null，而第二行代码中的 object 为 null 时将会报异常，此时需要使用第三行代码中的空合安全取值调用运算符：object.field ??")]),a._v(" "),t("p",[a._v("​    此外，注意上图最后一行代码中的输出指令参数为一个逗号表达式，逗号表达式的整体求值结果为最后一个表达式的值，而输出指令对于null值不做输出，所以这行代码相当于是仅仅调用了 object.method() 方法去实现某些操作。")])])]),a._v(" "),t("h3",{attrs:{id:"_2-if-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-if-指令"}},[a._v("#")]),a._v(" 2.#if 指令")]),a._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v("#if(cond)\n....\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"_3-for-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-for-指令"}},[a._v("#")]),a._v(" 3.#for()指令")]),a._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v("// 对List 、数组、set 这类结构进行迭代\n#for(x : list)\n #(x.field)\n#end\n\n//对 Map 进行迭代\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end  \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("第二个 for 指令是对 map 进行迭代，取值方式为 item.key 与 item.value。该取值方式是 enjoy 对 map 迭代的增强功能，可以节省代码量。仍然也可以使用传统的 java map 迭代方式：#for( x : map.entrySet() )   #(x.key) #(x.value)   #end")]),a._v(" "),t("p",[t("strong",[a._v("注意")]),a._v("："),t("strong",[a._v("当被迭代的目标为 null 时，不需要做 null 值判断")]),a._v("，for 指令会自动跳过，不进行迭代。从而可以避免 if 判断，节省代码提高效率。")]),a._v(" "),t("p",[a._v("for指令还支持对其状态进行获去")]),a._v(" "),t("ol",[t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("2 #for(x : listAaa)\n3.   #(for.index)\n4.   #(x.field)\n5.   \n6.   #for(x : listBbb)\n7.    #(for.outer.index)\n8.    #(for.index)\n9.    #(x.field)\n10.   #end\n11. \\#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])])])]),a._v(" "),t("p",[a._v("以上代码中的 #(for.index)、#(for.outer.index) 是对 for 指令当前状态值进行获取，前者是获取当前 for 指令迭代的下标值(从0开始的整数)，后者是内层for指令获取上一层for指令的状态。这里"),t("strong",[a._v("注意")]),a._v(" ："),t("strong",[a._v("for.outer 这个固定的用法，专门用于在内层 for 指令中引用上层for指令状态")]),a._v("。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li")]),a._v(" "),t("p",[a._v("for指令支持的所有状态值如下示例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#for(x : listAaa) \n#(for.size)    被迭代对象的 size 值  \n#(for.index)   从 0 开始的下标值 \n#(for.count)   从 1 开始的记数值   \n#(for.first)   是否为第一次迭代 \n#(for.last)    是否为最后一次迭代  \n#(for.odd)     是否为奇数次迭代  \n#(for.even)    是否为偶数次迭代  \n#(for.outer)   引用上层 #for 指令状态#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[a._v("for 指令还支持 #else 分支语句")]),a._v("，在for指令迭代次数为0时，将执行 #else 分支内部的语句，如下是示例：")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("blog "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" blogList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("   \n    #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("blog"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    #"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("   \n    您还没有写过博客，点击此处"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("a href"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/blog/add"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("开博"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("​     以上代码中，当blogList.size() 为0或者blogList为null值时，也即迭代次数为0时，会执行#else分支，这种场景在web项目中极为常见。")]),a._v(" "),t("p",[a._v("​    最后，除了上面介绍的for指令迭代用法以外，还支持更常规的for语句形式，以下是代码示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  \n   #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"_4-switch-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-switch-指令"}},[a._v("#")]),a._v(" 4.#switch()指令")]),a._v(" "),t("p",[a._v("​    #switch 指令对标 java 语言的 switch 语句。基本用法一致，但做了少许提升用户体验的改进，用法如下：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("switch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("month"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n    #"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  \n        #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("month"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 月有 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("31")]),a._v(" 天  \n    #"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    \n        #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("month"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 月平年有"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("28")]),a._v("天，闰年有"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("29")]),a._v("天 \n    #"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v("    \n        月份错误"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("month "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"null"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("​    如上代码所示，#case 分支指令支持以逗号分隔的多个参数，这个功能就消解掉了 #break 指令的必要性，所以 enjoy 模板引擎是不需要 #break 指令的。")]),a._v(" "),t("h3",{attrs:{id:"_5-set-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-set-指令"}},[a._v("#")]),a._v(" 5.#set() 指令")]),a._v(" "),t("p",[a._v("set指令用于声明变量同时对其赋值，也可以是为已存在的变量进行赋值操作。set指令只接受赋值表达式，以及用逗号分隔的赋值表达式列表，如下是代码示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    \n#"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    \n#"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"key"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("456")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n   \n#"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  #"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"key"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[t("strong",[a._v("重要")]),a._v("：由于赋值表达式本质也是表达式，而其它指令本质上支持任意表达式，所以 #set 指令对于赋值来说并不是必须的，例如可以在 #() 输出指令中使用赋值表达式：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abc"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" array "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("k1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("v1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("以上代码在输出指令中使用了多个赋值表达式，可以实现 #set 的功能，在最后通过一个 null 值来避免输出表达式输出任何东西。类似的，别的指令内部也可以这么来使用赋值表达式。")]),a._v(" "),t("h3",{attrs:{id:"_6-include"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-include"}},[a._v("#")]),a._v(" 6.#include")]),a._v(" "),t("p",[a._v("​       include指令用于将外部模板内容包含进来，被包含的内容会被解析成为当前模板中的一部分进行使用，如下是代码示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("#"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("include")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sidebar.html"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("​    #include 指令第一个参数必须为 String 常量，"),t("strong",[a._v("当以 ”/” 打头时将以 baseTemplatePath 为相对路径去找文件，否则将以使用 #include 指令的当前模板的路径为相对路径去找文件。")])]),a._v(" "),t("p",[a._v("​    baseTemplatePath 可以在 configEngine(Engine me) 中通过 me.setBaseTemplatePath(…) 进行配置。")]),a._v(" "),t("h3",{attrs:{id:"_7-define-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-define-指令"}},[a._v("#")]),a._v(" 7.#define 指令")]),a._v(" "),t("p",[a._v("​    #define指令是模板引擎主要的扩展方式之一，define指令可以定义模板函数(Template Function)。通过define指令，可以将需要被重用的模板片段定义成一个一个的 template function，在调用的时候可以通过传入参数实现千变万化的功能。")]),a._v(" "),t("p",[a._v("​    在此给出使用define指令实现的layout功能，"),t("strong",[a._v("首先创建一个layout.html文件")]),a._v("，其中的代码如下：")]),a._v(" "),t("div",{staticClass:"language-php+HTML line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#define layout()\n<html> \n    <head>    \n        <title>JFinal俱乐部</title>  \n    </head>  \n    <body>  \n        #@content()  \n    </body>\n</html>#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("​     以上代码中通过#define layout()定义了一个名称为layout的模板函数，定义以#end结尾，其中的 #@content() 表示调用另一个名为 content 的模板函数。")]),a._v(" "),t("p",[a._v("​    特别注意："),t("strong",[a._v("模板函数的调用比指令调用多一个@字符")]),a._v("，是为了与指令调用区分开来。")]),a._v(" "),t("p",[a._v("​    接下来再创建一个模板文件，如下所示：")]),a._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v('#include("layout.html")\n#@layout() \n#define content()\n'),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("div")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("   这里是模板内容部分，相当于传统模板引擎的 nested 的部分\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("div")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("​    上图中的第一行代码表示将前面创建的模板文件layout.html包含进来，第二行代码表示调用layout.html中定义的layout模板函数，而这个模板函数中又调用了content这个模板函数，该content函数已被定义在当前文件中，简单将这个过程理解为函数定义与函数调用就可以了。注意，上例实现layout功能的模板函数、模板文件名称可以任意取，不必像velocity、freemarker需要记住 nested、layoutContent这样无聊的概念。")]),a._v(" "),t("p",[a._v("​    此外，模板函数必然支持形参，用法与java规则基本相同，唯一不同的是不需要指定参数类型，只需要参数名称即可，如下是代码示例：")]),a._v(" "),t("div",{staticClass:"language-php+HTML line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#define test(a, b, c)  \n#(a)\n#(b) \n#(c)\n#end\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("​    以上代码中的模板函数test，有a、b、c三个形参，在函数体内仅简单对这三个变量进行了输出，注意形参必须是合法的java标识符，形参的作用域为该模板函数之内符合绝大多数程序语言习惯，以下是调用该模板函数的例子代码：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#@test(123, "abc", user.name)\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("​    以上代码中，第一个参数传入的整型123，第二个是字符串，第三个是一个 field 取值表达式，从例子可以看出，实参可以是任意表达式，在调用时模板引擎会对表达式求值，并逐一赋值给模板函数的形参。")]),a._v(" "),t("p",[a._v("​    注意：形参与实参数量要相同，如果实参偶尔有更多不确定的参数要传递进去，可以在调用模板函数代码之前使用#set指令将值传递进去，在模板函数内部可用空合安全取值调用表达式进行适当控制，具体用法参考 jfinal-club 项目中的 _paginate.html 中的 append 变量的用法。")]),a._v(" "),t("h3",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),t("h1",{attrs:{id:"_11-插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-插件"}},[a._v("#")]),a._v(" 11.插件")]),a._v(" "),t("h2",{attrs:{id:"_1-自定义插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义插件"}},[a._v("#")]),a._v(" 1.自定义插件")]),a._v(" "),t("p",[a._v("新建一个插件实现Iplugin方法：（在config 里配置 configPlugin ）")]),a._v(" "),t("p",[a._v("在运行程序时，  启动start方法")]),a._v(" "),t("p",[a._v("​     return 返回结果，如果为false 则抛出异常，这是用于检测代码，在init初始化中某些类初始化不成功，")]),a._v(" "),t("p",[a._v("​      检测到异常")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204203970.png",alt:"image-20220115204203970"}})]),a._v(" "),t("p",[a._v("Manager 实现方法：")]),a._v(" "),t("p",[a._v("​     进行一些初始化的设置")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204215408.png",alt:"image-20220115204215408"}})]),a._v(" "),t("p",[a._v("暴露Kit 接口")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204224722.png",alt:"image-20220115204224722"}})]),a._v(" "),t("h2",{attrs:{id:"_2-官方插件-redisplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-官方插件-redisplugin"}},[a._v("#")]),a._v(" 2.官方插件 （RedisPlugin）")]),a._v(" "),t("p",[a._v("​    -------------  "),t("strong",[a._v("EhCachePlugin（前面讲缓存的时候已经讲过）")])]),a._v(" "),t("p",[a._v("Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。")]),a._v(" "),t("p",[a._v("Redis 与其他 key - value 缓存产品有以下三个特点：")]),a._v(" "),t("ul",[t("li",[a._v("Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。")]),a._v(" "),t("li",[a._v("Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。")]),a._v(" "),t("li",[a._v("Redis支持数据的备份，即master-slave模式的数据备份。")])]),a._v(" "),t("h3",{attrs:{id:"_1-jfinal-中redis插件的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jfinal-中redis插件的使用"}},[a._v("#")]),a._v(" 1.Jfinal 中redis插件的使用")]),a._v(" "),t("p",[a._v("​    1.第一步 创建一个插件对象")]),a._v(" "),t("p",[a._v("​          第一个参数是 CachaName, 第二个参数是 Redis 所在服务器的域名")]),a._v(" "),t("p",[a._v("​          它还可以传其他的参数，具体可底层原码")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204234891.png",alt:"image-20220115204234891"}})]),a._v(" "),t("p",[a._v("​    2.在此之前 要下载Redis,启动Redis服务")]),a._v(" "),t("p",[a._v("​    3.手动启动插件")]),a._v(" "),t("p",[a._v("​             rp.start();")]),a._v(" "),t("p",[a._v("​    4.设置数据和拿出数据  set 和 get方法")]),a._v(" "),t("p",[a._v("​    传输键值对的数据 ，当然Redis插件也封装了许多的方法可以用")]),a._v(" "),t("p",[a._v("如果在configPlugin中配置")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204304814.png",alt:"image-20220115204304814"}})]),a._v(" "),t("p",[a._v("可以直接使用Redis.use() ,")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204314935.png",alt:"image-20220115204314935"}})]),a._v(" "),t("h5",{attrs:{id:"cachaname-参数的解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cachaname-参数的解释"}},[a._v("#")]),a._v(" CachaName 参数的解释")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/yishenlaoban/git-typore/raw/master/image_my/image-20220115204323916.png",alt:"image-20220115204323916"}})]),a._v(" "),t("p",[a._v("多个数据库连接了不同的Redis,   CachaName决定使用那个Redis")]),a._v(" "),t("h3",{attrs:{id:"_2-redius插件和cacha插件的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-redius插件和cacha插件的使用"}},[a._v("#")]),a._v(" 2.Redius插件和Cacha插件的使用")]),a._v(" "),t("p",[a._v("​    见官方手册")]),a._v(" "),t("h1",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),t("h3",{attrs:{id:"_3-con4jplugin-插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-con4jplugin-插件"}},[a._v("#")]),a._v(" 3.con4jPlugin 插件")]),a._v(" "),t("p",[a._v("1.导入jar包")]),a._v(" "),t("p",[a._v("2.插件的使用")]),a._v(" "),t("p",[a._v("相当于一个计时器，在他控制下的程序，每到一个规定的时间点，他就执行一次")])])}),[],!1,null,null,null);s.default=e.exports}}]);